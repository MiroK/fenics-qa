cell = tetrahedron
element = VectorElement("Lagrange", cell, 1 )
property = FiniteElement("DG", cell, 0 )

v = TestFunction(element)
u = TrialFunction(element) 
f = Coefficient(element)

E = Coefficient(property)
nu = Coefficient(property)
epsr = Coefficient(property)

mu = E / (2*(1+nu))
lmbda = E*nu / ((1+nu)*(1-2*nu))

def epsilon(v):
    return 0.5*(grad(v) + transpose(grad(v))) + epsr*Identity(cell.d)

def sigma(v):
    return 2*mu*epsilon(v) + lmbda*(tr(epsilon(v)) * Identity(cell.d))

F = inner( sigma(u), grad(v) )*dx + dot( f, v ) * dx
a = lhs(F)
L = rhs(F)

